package chatclient;/** * ChatClient.java *  * Modified Chat GUI to interface with chat servers * Will enable easy interaction and usability *  * @author Jace Maxfield && Sean Groathouse *  */import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.border.*;@SuppressWarnings("serial")public class ChatClient extends JFrame implements ActionListener, KeyListener, ItemListener{	//private JButton connect;	private JButton sendButton;	private JButton exitButton;	private JButton users;	private JButton privateMsgUser;	//private JTextField serverText;	private JTextField sendText;	private JTextField privateUser;	private JTextArea displayArea;	private JTextArea userList;	//private JLabel serverLabel;	private JCheckBox privateMsg;		private Client client;	public ChatClient() {				//TODO check to see if server exists		//TODO and manage failures in all instances		String connect2Server = JOptionPane.showInputDialog("Please enter the chat server you wish to connect to:", "");		//client.connect(connect2Server);				//TODO validate a login		String login = JOptionPane.showInputDialog("Welcome! Please login or create a user", "");				/**		 * a panel used for placing components		 */		JPanel southPane = new JPanel();		JPanel northPane = new JPanel();		JPanel eastPane = new JPanel();				eastPane.setLayout(new BoxLayout(eastPane, BoxLayout.Y_AXIS));		Border etched = BorderFactory.createEtchedBorder();		Border titled = BorderFactory.createTitledBorder(etched, "Enter Message Here ...");		southPane.setBorder(titled);		/**		 * set up all the components		 */		privateMsg = new JCheckBox("Private Message");		//serverLabel = new JLabel("Server Name");		//serverText = new JTextField(30);		sendText = new JTextField(30);		privateUser = new JTextField(16);		users = new JButton("Active Users");		privateMsgUser = new JButton("Add Recipient");		//connect = new JButton("Connect");		sendButton = new JButton("Send");		exitButton = new JButton("Exit");				users.setAlignmentX(Component.CENTER_ALIGNMENT);		users.setAlignmentY(Component.CENTER_ALIGNMENT);		privateMsg.setAlignmentX(Component.CENTER_ALIGNMENT);		privateMsg.setAlignmentY(Component.CENTER_ALIGNMENT);		privateMsgUser.setAlignmentX(Component.CENTER_ALIGNMENT);		privateMsgUser.setAlignmentY(Component.CENTER_ALIGNMENT);		/**		 * register the listeners for the different button clicks		 */		sendText.addKeyListener(this);		privateUser.addKeyListener(this);		//serverText.addKeyListener(this);		//connect.addActionListener(this);		users.addActionListener(this);		privateMsg.addActionListener(this);		privateMsgUser.addActionListener(this);		sendButton.addActionListener(this);		exitButton.addActionListener(this);						userList = new JTextArea(15,15);		userList.setEditable(false);		userList.setFont(new Font("SansSerif", Font.PLAIN, 14));						JScrollPane userScroll = new JScrollPane(userList);		getContentPane().add(userScroll, "Center");		/**		 * add the components to the panel		 */		//northPane.add(serverLabel);		//northPane.add(serverText);		//northPane.add(connect);		southPane.add(sendText);		southPane.add(sendButton);		southPane.add(exitButton);		eastPane.add(users);		eastPane.add(userList);		eastPane.add(privateMsg);		eastPane.add(privateUser);		eastPane.add(privateMsgUser);				eastPane.setBorder(new EmptyBorder(10, 10, 10, 10));		/**		 * add the panel to the "south" end of the container		 */		getContentPane().add(northPane,"North");		getContentPane().add(southPane,"South");		getContentPane().add(eastPane, "East");		/**		 * add the text area for displaying output. Associate		 * a scrollbar with this text area. Note we add the scrollpane		 * to the container, not the text area		 */				displayArea = new JTextArea(15,40);		displayArea.setEditable(false);		displayArea.setFont(new Font("SansSerif", Font.PLAIN, 14));		JScrollPane scrollPane = new JScrollPane(displayArea);		getContentPane().add(scrollPane,"Center");		/**		 * set the title and size of the frame		 */		setTitle("Chat Room");		pack();		setVisible(true);		sendText.requestFocus();		/** anonymous inner class to handle window closing events */		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				System.exit(0);			}		} );	}	/**	 * This gets the text the user entered and outputs it	 * in the display area.	 */	//TODO update this to pass string to server and screen instead of backwards to the screen	public void displayText() {		String message = sendText.getText().trim();		StringBuffer buffer = new StringBuffer(message.length());		// now reverse it		for (int i = message.length()-1; i >= 0; i--)			buffer.append(message.charAt(i));		displayArea.append(buffer.toString() + "\n");		sendText.setText("");		sendText.requestFocus();	}		/**	 * This will popup a new window and ask for the username	 * of the desired user.	 */	public String addPrivateUser(String userName) {		String privateUser = userName;		return privateUser;	}	/**	 * This method responds to action events .... i.e. button clicks	 * and fulfills the contract of the ActionListener interface.	 */	//TODO add all the action items	public void actionPerformed(ActionEvent evt) {		Object source = evt.getSource();		ItemEvent ie = new ItemEvent(privateMsg, ItemEvent.SELECTED, evt, ItemEvent.DESELECTED);		if (source == sendButton) 			displayText();		else if (source == exitButton)			System.exit(0);		else if (source == privateMsg)			itemStateChanged(ie);		else if (source == users)			//request a list of users from the server			System.out.println("Call method from Client class to request /users");	}			/**	 * This method is used only for the private message option	 * @param e	 */		public void itemStateChanged(ItemEvent e) {		if (e.getSource() == privateMsg) {			if (privateMsg.isSelected()) {				privateUser.setVisible(true);				if (privateUser.getText() != null)					addPrivateUser(privateUser.getText());			}			else				privateUser.setVisible(false);		}	}	/**	 * These methods responds to keystroke events and fulfills	 * the contract of the KeyListener interface.	 */	/**	 * This is invoked when the user presses	 * the ENTER key.	 */	public void keyPressed(KeyEvent e) { 		if (e.getKeyCode() == KeyEvent.VK_ENTER)			displayText();	}	/** Not implemented */	public void keyReleased(KeyEvent e) { }	/** Not implemented */	public void keyTyped(KeyEvent e) {  }	public static void main(String[] args) {		JFrame win = new ChatClient();	}}